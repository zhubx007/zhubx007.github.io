<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ceph Bucket Notification (Ceph 存储桶通知)</title>
    <url>/2021/09/13/ceph-bucket-notification/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>存储桶通知提供了一种在存储同上发生某些事件时将消息发送到 radosgw 之外的机制。当前，通知可以发送到：HTTP、AMQP 0.9.1 和 Kafka</p>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="搭建一个-ceph-对象存储集群"><a href="#搭建一个-ceph-对象存储集群" class="headerlink" title="搭建一个 ceph 对象存储集群"></a>搭建一个 ceph 对象存储集群</h2><p>参考 ceph 官方文档搭建：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmNlcGguY29tL2VuL2xhdGVzdC8=">https://docs.ceph.com/en/latest/<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="搭建一个简易的-server，提供-API-接收通知"><a href="#搭建一个简易的-server，提供-API-接收通知" class="headerlink" title="搭建一个简易的 server，提供 API 接收通知"></a>搭建一个简易的 server，提供 API 接收通知</h2><blockquote>
<p>文件 <code>server.py</code></p>
</blockquote>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> BaseHTTPRequestHandler, HTTPServer</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span>(<span class="params">BaseHTTPRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_set_response</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.send_response(<span class="number">200</span>)</span><br><span class="line">        self.send_header(<span class="string">"Content-type"</span>, <span class="string">"text/html"</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span>(<span class="params">self</span>):</span></span><br><span class="line">        logging.info(<span class="string">f"GET request\nPath: <span class="subst">{self.path}</span>\nHeaders:\n<span class="subst">{self.headers}</span>\n"</span>)</span><br><span class="line">        self._set_response()</span><br><span class="line">        self.wfile.write(<span class="string">f"GET request for <span class="subst">{self.path}</span>"</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_POST</span>(<span class="params">self</span>):</span></span><br><span class="line">        content_length = <span class="built_in">int</span>(self.headers[<span class="string">"Content-Length"</span>])</span><br><span class="line">        post_data = self.rfile.read(content_length)</span><br><span class="line">        logging.info(</span><br><span class="line">            <span class="string">f"POST request\nPath: <span class="subst">{self.path}</span>\nHeaders:\n<span class="subst">{self.headers}</span>\nBody:\n<span class="subst">{post_data.decode(<span class="string">'utf-8'</span>)}</span>\n"</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self._set_response()</span><br><span class="line">        self.wfile.write(<span class="string">f"POST request for <span class="subst">{self.path}</span>"</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">server_class=HTTPServer, handler_class=S, port=<span class="number">8080</span></span>):</span></span><br><span class="line">    logging.basicConfig(level=logging.INFO)</span><br><span class="line">    server_address = (<span class="string">""</span>, port)</span><br><span class="line">    httpd = server_class(server_address, handler_class)</span><br><span class="line">    logging.info(<span class="string">"Starting httpd...\n"</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        httpd.serve_forever()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    httpd.server_close()</span><br><span class="line">    logging.info(<span class="string">"Stopping httpd...\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(argv) == <span class="number">2</span>:</span><br><span class="line">        run(port=<span class="built_in">int</span>(argv[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        run()</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>执行 <code>python3 server.py 8080</code></p>
</blockquote>
<h2 id="创建-topic、bucket-以及-bucket-更新通知机制"><a href="#创建-topic、bucket-以及-bucket-更新通知机制" class="headerlink" title="创建 topic、bucket 以及 bucket 更新通知机制"></a>创建 topic、bucket 以及 bucket 更新通知机制</h2><blockquote>
<p>文件 <code>notify.py</code></p>
</blockquote>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> botocore</span><br><span class="line"></span><br><span class="line"><span class="string">"""This class configures bucket notifications for both kafka and rabbitmq endpoints for real-time message queuing"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Notifier</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># creates all needed arguments for the program to run</span></span><br><span class="line">        parser = argparse.ArgumentParser()</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">"-e"</span>,</span><br><span class="line">            <span class="string">"--endpoint-url"</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">"endpoint url for s3 object storage"</span>,</span><br><span class="line">            required=<span class="literal">True</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">"-a"</span>,</span><br><span class="line">            <span class="string">"--access-key"</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">"access key for s3 object storage"</span>,</span><br><span class="line">            required=<span class="literal">True</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">"-s"</span>,</span><br><span class="line">            <span class="string">"--secret-key"</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">"secret key for s3 object storage"</span>,</span><br><span class="line">            required=<span class="literal">True</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(<span class="string">"-b"</span>, <span class="string">"--bucket-name"</span>, <span class="built_in">help</span>=<span class="string">"s3 bucket name"</span>, required=<span class="literal">True</span>)</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">"-ke"</span>,</span><br><span class="line">            <span class="string">"--kafka-endpoint"</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">"kafka endpoint in which rgw will send notifications to"</span>,</span><br><span class="line">            required=<span class="literal">False</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">"-ae"</span>,</span><br><span class="line">            <span class="string">"--amqp-endpoint"</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">"amqp endpoint in which rgw will send notifications to"</span>,</span><br><span class="line">            required=<span class="literal">False</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">"-he"</span>,</span><br><span class="line">            <span class="string">"--http-endpoint"</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">"http endpoint in which rgw will send notifications to"</span>,</span><br><span class="line">            required=<span class="literal">False</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">"-t"</span>,</span><br><span class="line">            <span class="string">"--topic"</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">"topic name in which rgw will send notifications to"</span>,</span><br><span class="line">            required=<span class="literal">True</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">"-f"</span>,</span><br><span class="line">            <span class="string">"--filter"</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">"filter such as prefix, suffix, metadata or tags"</span>,</span><br><span class="line">            required=<span class="literal">False</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">"-o"</span>,</span><br><span class="line">            <span class="string">"--opaque"</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">"opaque data that will be sent in the notifications"</span>,</span><br><span class="line">            required=<span class="literal">False</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">"-x"</span>,</span><br><span class="line">            <span class="string">"--exchange"</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">"amqp exchange name (mandatory for amqp endpoints)"</span>,</span><br><span class="line">            required=<span class="literal">False</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">"-n"</span>,</span><br><span class="line">            <span class="string">"--notification"</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">"notification name, allows for setting multiple notifications on the same bucket"</span>,</span><br><span class="line">            required=<span class="literal">False</span>,</span><br><span class="line">            default=<span class="string">"configuration"</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parsing all arguments</span></span><br><span class="line">        args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># building instance vars</span></span><br><span class="line">        self.endpoint_url = args.endpoint_url</span><br><span class="line">        self.access_key = args.access_key</span><br><span class="line">        self.secret_key = args.secret_key</span><br><span class="line">        self.bucket_name = args.bucket_name</span><br><span class="line">        self.kafka_endpoint = args.kafka_endpoint</span><br><span class="line">        self.http_endpoint = args.http_endpoint</span><br><span class="line">        self.amqp_endpoint = args.amqp_endpoint</span><br><span class="line">        self.topic = args.topic</span><br><span class="line">        self.<span class="built_in">filter</span> = args.<span class="built_in">filter</span></span><br><span class="line">        self.opaque = args.opaque</span><br><span class="line">        self.exchange = args.exchange</span><br><span class="line">        self.notification = args.notification</span><br><span class="line">        self.sns = boto3.client(</span><br><span class="line">            <span class="string">"sns"</span>,</span><br><span class="line">            endpoint_url=self.endpoint_url,</span><br><span class="line">            aws_access_key_id=self.access_key,</span><br><span class="line">            region_name=<span class="string">"default"</span>,</span><br><span class="line">            aws_secret_access_key=self.secret_key,</span><br><span class="line">            config=botocore.client.Config(signature_version=<span class="string">"s3"</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.s3 = boto3.client(</span><br><span class="line">            <span class="string">"s3"</span>,</span><br><span class="line">            endpoint_url=self.endpoint_url,</span><br><span class="line">            aws_access_key_id=self.access_key,</span><br><span class="line">            aws_secret_access_key=self.secret_key,</span><br><span class="line">            region_name=<span class="string">"default"</span>,</span><br><span class="line">            config=botocore.client.Config(signature_version=<span class="string">"s3"</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="string">""" This function creates and sns-like topic with configured push endpoint"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_sns_topic</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        attributes = {}</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.opaque:</span><br><span class="line">            attributes[<span class="string">"OpaqueData"</span>] = self.opaque</span><br><span class="line"></span><br><span class="line">        <span class="comment"># in case wanted MQ endpoint is kafka</span></span><br><span class="line">        <span class="keyword">if</span> self.kafka_endpoint:</span><br><span class="line">            attributes[<span class="string">"push-endpoint"</span>] = <span class="string">"kafka://"</span> + self.kafka_endpoint</span><br><span class="line">            attributes[<span class="string">"kafka-ack-level"</span>] = <span class="string">"broker"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># in case wanted MQ endpoint is rabbitmq</span></span><br><span class="line">        <span class="keyword">elif</span> self.amqp_endpoint:</span><br><span class="line">            attributes[<span class="string">"push-endpoint"</span>] = <span class="string">"amqp://"</span> + self.amqp_endpoint</span><br><span class="line">            attributes[<span class="string">"amqp-exchange"</span>] = self.exchange_name</span><br><span class="line">            attributes[<span class="string">"amqp-ack-level"</span>] = <span class="string">"broker"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># in case wanted MQ endpoint is http</span></span><br><span class="line">        <span class="keyword">elif</span> self.http_endpoint:</span><br><span class="line">            attributes[<span class="string">"push-endpoint"</span>] = <span class="string">"http://"</span> + self.http_endpoint</span><br><span class="line"></span><br><span class="line">        <span class="comment"># in case wanted MQ endpoint is not provided by the user</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">"please configure a push endpoint!"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># creates the wanted sns-like topic on RGW and gets the topic's ARN</span></span><br><span class="line">        self.topic_arn = self.sns.create_topic(Name=self.topic, Attributes=attributes)[<span class="string">"TopicArn"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="string">""" This function configures bucket notification for object creation and removal """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">configure_bucket_notification</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># creates a bucket if it doesn't exists</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.s3.head_bucket(Bucket=self.bucket_name)</span><br><span class="line">        <span class="keyword">except</span> botocore.exceptions.ClientError:</span><br><span class="line">            self.s3.create_bucket(Bucket=self.bucket_name)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initial dictionary</span></span><br><span class="line">        bucket_notifications_configuration = {</span><br><span class="line">            <span class="string">"TopicConfigurations"</span>: [</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"Id"</span>: self.notification,</span><br><span class="line">                    <span class="string">"TopicArn"</span>: self.topic_arn,</span><br><span class="line">                    <span class="string">"Events"</span>: [<span class="string">"s3:ObjectCreated:*"</span>, <span class="string">"s3:ObjectRemoved:*"</span>],</span><br><span class="line">                },</span><br><span class="line">            ],</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment"># in case the user has provided a filter to use</span></span><br><span class="line">        <span class="keyword">if</span> self.<span class="built_in">filter</span>:</span><br><span class="line">            bucket_notifications_configuration[<span class="string">"TopicConfigurations"</span>][<span class="number">0</span>].update(</span><br><span class="line">                {<span class="string">"Filter"</span>: json.loads(self.<span class="built_in">filter</span>)},</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pushed the notification configuration to the bucket</span></span><br><span class="line">        self.s3.put_bucket_notification_configuration(</span><br><span class="line">            Bucket=self.bucket_name,</span><br><span class="line">            NotificationConfiguration=bucket_notifications_configuration,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># creates an notifier instance from class</span></span><br><span class="line">    notifier = Notifier()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create sns-like topic sent to MQ endpoint</span></span><br><span class="line">    notifier.create_sns_topic()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># configures object creation and removal based notification for the bucket</span></span><br><span class="line">    notifier.configure_bucket_notification()</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>执行 <code>python3 notify.py -h</code> 查看帮助</p>
</blockquote>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><ul>
<li>往 <code>notify.py</code> 脚本中新建的 bucket 中上传文件，可以看到如下信息：</li>
</ul>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"Records"</span>:[</span><br><span class="line">        {</span><br><span class="line">            <span class="attr">"eventVersion"</span>:<span class="string">"2.2"</span>,</span><br><span class="line">            <span class="attr">"eventSource"</span>:<span class="string">"ceph:s3"</span>,</span><br><span class="line">            <span class="attr">"awsRegion"</span>:<span class="string">""</span>,</span><br><span class="line">            <span class="attr">"eventTime"</span>:<span class="string">"2021-04-29 03:44:09.933439Z"</span>,</span><br><span class="line">            <span class="attr">"eventName"</span>:<span class="string">"s3:ObjectCreated:Put"</span>,</span><br><span class="line">            <span class="attr">"userIdentity"</span>:{</span><br><span class="line">                <span class="attr">"principalId"</span>:<span class="string">"7b10eee340c84201bc99ca5d8fa4f61d"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="attr">"requestParameters"</span>:{</span><br><span class="line">                <span class="attr">"sourceIPAddress"</span>:<span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            <span class="attr">"responseElements"</span>:{</span><br><span class="line">                <span class="attr">"x-amz-request-id"</span>:<span class="string">"cffa8590-7621-4f07-99b4-5f5f5a30baab.4451.127"</span>,</span><br><span class="line">                <span class="attr">"x-amz-id-2"</span>:<span class="string">"1163-default-default"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="attr">"s3"</span>:{</span><br><span class="line">                <span class="attr">"s3SchemaVersion"</span>:<span class="string">"1.0"</span>,</span><br><span class="line">                <span class="attr">"configurationId"</span>:<span class="string">"configuration"</span>,</span><br><span class="line">                <span class="attr">"bucket"</span>:{</span><br><span class="line">                    <span class="attr">"name"</span>:<span class="string">"test-notifications"</span>,</span><br><span class="line">                    <span class="attr">"ownerIdentity"</span>:{</span><br><span class="line">                        <span class="attr">"principalId"</span>:<span class="string">"7b10eee340c84201bc99ca5d8fa4f61d"</span></span><br><span class="line">                    },</span><br><span class="line">                    <span class="attr">"arn"</span>:<span class="string">"arn:aws:s3:::test-notifications"</span>,</span><br><span class="line">                    <span class="attr">"id"</span>:<span class="string">"cffa8590-7621-4f07-99b4-5f5f5a30baab.4478.23"</span></span><br><span class="line">                },</span><br><span class="line">                <span class="attr">"object"</span>:{</span><br><span class="line">                    <span class="attr">"key"</span>:<span class="string">"charging-simple-logic.png"</span>,</span><br><span class="line">                    <span class="attr">"size"</span>:<span class="number">9613</span>,</span><br><span class="line">                    <span class="attr">"etag"</span>:<span class="string">"e517ba5e9e85f66a5bba81109ab4652e"</span>,</span><br><span class="line">                    <span class="attr">"versionId"</span>:<span class="string">""</span>,</span><br><span class="line">                    <span class="attr">"sequencer"</span>:<span class="string">"892B8A60D2CAEF37"</span>,</span><br><span class="line">                    <span class="attr">"metadata"</span>:[</span><br><span class="line">                        {</span><br><span class="line">                            <span class="attr">"key"</span>:<span class="string">"x-amz-content-sha256"</span>,</span><br><span class="line">                            <span class="attr">"val"</span>:<span class="string">"91af6adc28cbee8a82d186604f03a062b4ee64e26caebbd5d5da8e41182a1cdf"</span></span><br><span class="line">                        },</span><br><span class="line">                        {</span><br><span class="line">                            <span class="attr">"key"</span>:<span class="string">"x-amz-date"</span>,</span><br><span class="line">                            <span class="attr">"val"</span>:<span class="string">"20210429T034409Z"</span></span><br><span class="line">                        }</span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">"tags"</span>:[</span><br><span class="line"></span><br><span class="line">                    ]</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">            <span class="attr">"eventId"</span>:<span class="string">"1619667849.938461.e517ba5e9e85f66a5bba81109ab4652e"</span>,</span><br><span class="line">            <span class="attr">"opaqueData"</span>:<span class="string">""</span></span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>配置 pip 国内源</title>
    <url>/2021/09/12/change-pip-index-url/</url>
    <content><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><ol>
<li>创建.pip 目录 </li>
</ol>
<figure class="highlight console"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p <span class="variable">$HOME</span>/.pip</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>写入 pip.conf 配置文件 </li>
</ol>
<figure class="highlight console"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"[global]</span></span></span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple" &gt;$HOME/.pip/pip.conf</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><ol>
<li>在用户目录下，创建 pip 目录，例如 C:\Users\Administrator\pip</li>
<li> 写入 pip.ini 配置文件，内容如下：</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></tbody></table></figure>

<h1 id="推荐国内源"><a href="#推荐国内源" class="headerlink" title="推荐国内源"></a>推荐国内源</h1><table>
<thead>
<tr>
<th>源</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>清华大学</td>
<td><span class="exturl" data-url="aHR0cHM6Ly9weXBpLnR1bmEudHNpbmdodWEuZWR1LmNuL3NpbXBsZQ=="> https://pypi.tuna.tsinghua.edu.cn/simple<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td>阿里云</td>
<td><span class="exturl" data-url="aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS9weXBpL3NpbXBsZQ=="> http://mirrors.aliyun.com/pypi/simple<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td>豆瓣</td>
<td><span class="exturl" data-url="aHR0cDovL3B5cGkuZG91YmFuLmNvbS9zaW1wbGU="> http://pypi.douban.com/simple<i class="fa fa-external-link-alt"></i></span></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>pip</tag>
      </tags>
  </entry>
</search>
