<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ceph Bucket Notification(Ceph 存储桶通知)</title>
    <url>/posts/archives/24828.html/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>存储桶通知提供了一种在存储同上发生某些事件时将消息发送到 radosgw 之外的机制。当前，通知可以发送到：HTTP、AMQP 0.9.1 和 Kafka</p>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="搭建一个-ceph-对象存储集群"><a href="#搭建一个-ceph-对象存储集群" class="headerlink" title="搭建一个 ceph 对象存储集群"></a>搭建一个 ceph 对象存储集群</h2><p>参考 ceph 官方文档搭建：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmNlcGguY29tL2VuL2xhdGVzdC8=">https://docs.ceph.com/en/latest/<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="搭建一个简易的-server，提供-API-接收通知"><a href="#搭建一个简易的-server，提供-API-接收通知" class="headerlink" title="搭建一个简易的 server，提供 API 接收通知"></a>搭建一个简易的 server，提供 API 接收通知</h2><blockquote>
<p>文件 <code>server.py</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> BaseHTTPRequestHandler, HTTPServer</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span>(<span class="params">BaseHTTPRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_set_response</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.send_response(<span class="number">200</span>)</span><br><span class="line">        self.send_header(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;text/html&quot;</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span>(<span class="params">self</span>):</span></span><br><span class="line">        logging.info(<span class="string">f&quot;GET request\nPath: <span class="subst">&#123;self.path&#125;</span>\nHeaders:\n<span class="subst">&#123;self.headers&#125;</span>\n&quot;</span>)</span><br><span class="line">        self._set_response()</span><br><span class="line">        self.wfile.write(<span class="string">f&quot;GET request for <span class="subst">&#123;self.path&#125;</span>&quot;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_POST</span>(<span class="params">self</span>):</span></span><br><span class="line">        content_length = <span class="built_in">int</span>(self.headers[<span class="string">&quot;Content-Length&quot;</span>])</span><br><span class="line">        post_data = self.rfile.read(content_length)</span><br><span class="line">        logging.info(</span><br><span class="line">            <span class="string">f&quot;POST request\nPath: <span class="subst">&#123;self.path&#125;</span>\nHeaders:\n<span class="subst">&#123;self.headers&#125;</span>\nBody:\n<span class="subst">&#123;post_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)&#125;</span>\n&quot;</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self._set_response()</span><br><span class="line">        self.wfile.write(<span class="string">f&quot;POST request for <span class="subst">&#123;self.path&#125;</span>&quot;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">server_class=HTTPServer, handler_class=S, port=<span class="number">8080</span></span>):</span></span><br><span class="line">    logging.basicConfig(level=logging.INFO)</span><br><span class="line">    server_address = (<span class="string">&quot;&quot;</span>, port)</span><br><span class="line">    httpd = server_class(server_address, handler_class)</span><br><span class="line">    logging.info(<span class="string">&quot;Starting httpd...\n&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        httpd.serve_forever()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    httpd.server_close()</span><br><span class="line">    logging.info(<span class="string">&quot;Stopping httpd...\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(argv) == <span class="number">2</span>:</span><br><span class="line">        run(port=<span class="built_in">int</span>(argv[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        run()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行 <code>python3 server.py 8080</code></p>
</blockquote>
<h2 id="创建-topic、bucket-以及-bucket-更新通知机制"><a href="#创建-topic、bucket-以及-bucket-更新通知机制" class="headerlink" title="创建 topic、bucket 以及 bucket 更新通知机制"></a>创建 topic、bucket 以及 bucket 更新通知机制</h2><blockquote>
<p>文件 <code>notify.py</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> botocore</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;This class configures bucket notifications for both kafka and rabbitmq endpoints for real-time message queuing&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Notifier</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># creates all needed arguments for the program to run</span></span><br><span class="line">        parser = argparse.ArgumentParser()</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">&quot;-e&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--endpoint-url&quot;</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">&quot;endpoint url for s3 object storage&quot;</span>,</span><br><span class="line">            required=<span class="literal">True</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">&quot;-a&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--access-key&quot;</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">&quot;access key for s3 object storage&quot;</span>,</span><br><span class="line">            required=<span class="literal">True</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">&quot;-s&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--secret-key&quot;</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">&quot;secret key for s3 object storage&quot;</span>,</span><br><span class="line">            required=<span class="literal">True</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(<span class="string">&quot;-b&quot;</span>, <span class="string">&quot;--bucket-name&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;s3 bucket name&quot;</span>, required=<span class="literal">True</span>)</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">&quot;-ke&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--kafka-endpoint&quot;</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">&quot;kafka endpoint in which rgw will send notifications to&quot;</span>,</span><br><span class="line">            required=<span class="literal">False</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">&quot;-ae&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--amqp-endpoint&quot;</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">&quot;amqp endpoint in which rgw will send notifications to&quot;</span>,</span><br><span class="line">            required=<span class="literal">False</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">&quot;-he&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--http-endpoint&quot;</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">&quot;http endpoint in which rgw will send notifications to&quot;</span>,</span><br><span class="line">            required=<span class="literal">False</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">&quot;-t&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--topic&quot;</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">&quot;topic name in which rgw will send notifications to&quot;</span>,</span><br><span class="line">            required=<span class="literal">True</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">&quot;-f&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--filter&quot;</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">&quot;filter such as prefix, suffix, metadata or tags&quot;</span>,</span><br><span class="line">            required=<span class="literal">False</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">&quot;-o&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--opaque&quot;</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">&quot;opaque data that will be sent in the notifications&quot;</span>,</span><br><span class="line">            required=<span class="literal">False</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">&quot;-x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--exchange&quot;</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">&quot;amqp exchange name (mandatory for amqp endpoints)&quot;</span>,</span><br><span class="line">            required=<span class="literal">False</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">&quot;-n&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--notification&quot;</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">&quot;notification name, allows for setting multiple notifications on the same bucket&quot;</span>,</span><br><span class="line">            required=<span class="literal">False</span>,</span><br><span class="line">            default=<span class="string">&quot;configuration&quot;</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parsing all arguments</span></span><br><span class="line">        args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># building instance vars</span></span><br><span class="line">        self.endpoint_url = args.endpoint_url</span><br><span class="line">        self.access_key = args.access_key</span><br><span class="line">        self.secret_key = args.secret_key</span><br><span class="line">        self.bucket_name = args.bucket_name</span><br><span class="line">        self.kafka_endpoint = args.kafka_endpoint</span><br><span class="line">        self.http_endpoint = args.http_endpoint</span><br><span class="line">        self.amqp_endpoint = args.amqp_endpoint</span><br><span class="line">        self.topic = args.topic</span><br><span class="line">        self.<span class="built_in">filter</span> = args.<span class="built_in">filter</span></span><br><span class="line">        self.opaque = args.opaque</span><br><span class="line">        self.exchange = args.exchange</span><br><span class="line">        self.notification = args.notification</span><br><span class="line">        self.sns = boto3.client(</span><br><span class="line">            <span class="string">&quot;sns&quot;</span>,</span><br><span class="line">            endpoint_url=self.endpoint_url,</span><br><span class="line">            aws_access_key_id=self.access_key,</span><br><span class="line">            region_name=<span class="string">&quot;default&quot;</span>,</span><br><span class="line">            aws_secret_access_key=self.secret_key,</span><br><span class="line">            config=botocore.client.Config(signature_version=<span class="string">&quot;s3&quot;</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.s3 = boto3.client(</span><br><span class="line">            <span class="string">&quot;s3&quot;</span>,</span><br><span class="line">            endpoint_url=self.endpoint_url,</span><br><span class="line">            aws_access_key_id=self.access_key,</span><br><span class="line">            aws_secret_access_key=self.secret_key,</span><br><span class="line">            region_name=<span class="string">&quot;default&quot;</span>,</span><br><span class="line">            config=botocore.client.Config(signature_version=<span class="string">&quot;s3&quot;</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot; This function creates and sns-like topic with configured push endpoint&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_sns_topic</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        attributes = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.opaque:</span><br><span class="line">            attributes[<span class="string">&quot;OpaqueData&quot;</span>] = self.opaque</span><br><span class="line"></span><br><span class="line">        <span class="comment"># in case wanted MQ endpoint is kafka</span></span><br><span class="line">        <span class="keyword">if</span> self.kafka_endpoint:</span><br><span class="line">            attributes[<span class="string">&quot;push-endpoint&quot;</span>] = <span class="string">&quot;kafka://&quot;</span> + self.kafka_endpoint</span><br><span class="line">            attributes[<span class="string">&quot;kafka-ack-level&quot;</span>] = <span class="string">&quot;broker&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># in case wanted MQ endpoint is rabbitmq</span></span><br><span class="line">        <span class="keyword">elif</span> self.amqp_endpoint:</span><br><span class="line">            attributes[<span class="string">&quot;push-endpoint&quot;</span>] = <span class="string">&quot;amqp://&quot;</span> + self.amqp_endpoint</span><br><span class="line">            attributes[<span class="string">&quot;amqp-exchange&quot;</span>] = self.exchange_name</span><br><span class="line">            attributes[<span class="string">&quot;amqp-ack-level&quot;</span>] = <span class="string">&quot;broker&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># in case wanted MQ endpoint is http</span></span><br><span class="line">        <span class="keyword">elif</span> self.http_endpoint:</span><br><span class="line">            attributes[<span class="string">&quot;push-endpoint&quot;</span>] = <span class="string">&quot;http://&quot;</span> + self.http_endpoint</span><br><span class="line"></span><br><span class="line">        <span class="comment"># in case wanted MQ endpoint is not provided by the user</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;please configure a push endpoint!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># creates the wanted sns-like topic on RGW and gets the topic&#x27;s ARN</span></span><br><span class="line">        self.topic_arn = self.sns.create_topic(Name=self.topic, Attributes=attributes)[<span class="string">&quot;TopicArn&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot; This function configures bucket notification for object creation and removal &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">configure_bucket_notification</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># creates a bucket if it doesn&#x27;t exists</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.s3.head_bucket(Bucket=self.bucket_name)</span><br><span class="line">        <span class="keyword">except</span> botocore.exceptions.ClientError:</span><br><span class="line">            self.s3.create_bucket(Bucket=self.bucket_name)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initial dictionary</span></span><br><span class="line">        bucket_notifications_configuration = &#123;</span><br><span class="line">            <span class="string">&quot;TopicConfigurations&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Id&quot;</span>: self.notification,</span><br><span class="line">                    <span class="string">&quot;TopicArn&quot;</span>: self.topic_arn,</span><br><span class="line">                    <span class="string">&quot;Events&quot;</span>: [<span class="string">&quot;s3:ObjectCreated:*&quot;</span>, <span class="string">&quot;s3:ObjectRemoved:*&quot;</span>],</span><br><span class="line">                &#125;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># in case the user has provided a filter to use</span></span><br><span class="line">        <span class="keyword">if</span> self.<span class="built_in">filter</span>:</span><br><span class="line">            bucket_notifications_configuration[<span class="string">&quot;TopicConfigurations&quot;</span>][<span class="number">0</span>].update(</span><br><span class="line">                &#123;<span class="string">&quot;Filter&quot;</span>: json.loads(self.<span class="built_in">filter</span>)&#125;,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pushed the notification configuration to the bucket</span></span><br><span class="line">        self.s3.put_bucket_notification_configuration(</span><br><span class="line">            Bucket=self.bucket_name,</span><br><span class="line">            NotificationConfiguration=bucket_notifications_configuration,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># creates an notifier instance from class</span></span><br><span class="line">    notifier = Notifier()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create sns-like topic sent to MQ endpoint</span></span><br><span class="line">    notifier.create_sns_topic()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># configures object creation and removal based notification for the bucket</span></span><br><span class="line">    notifier.configure_bucket_notification()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行 <code>python3 notify.py -h</code> 查看帮助</p>
</blockquote>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><ul>
<li>往 <code>notify.py</code> 脚本中新建的 bucket 中上传文件，可以看到如下信息：</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Records&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;eventVersion&quot;</span>:<span class="string">&quot;2.2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;eventSource&quot;</span>:<span class="string">&quot;ceph:s3&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;awsRegion&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;eventTime&quot;</span>:<span class="string">&quot;2021-04-29 03:44:09.933439Z&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;eventName&quot;</span>:<span class="string">&quot;s3:ObjectCreated:Put&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;userIdentity&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;principalId&quot;</span>:<span class="string">&quot;7b10eee340c84201bc99ca5d8fa4f61d&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;requestParameters&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;sourceIPAddress&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;responseElements&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;x-amz-request-id&quot;</span>:<span class="string">&quot;cffa8590-7621-4f07-99b4-5f5f5a30baab.4451.127&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;x-amz-id-2&quot;</span>:<span class="string">&quot;1163-default-default&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;s3&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;s3SchemaVersion&quot;</span>:<span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;configurationId&quot;</span>:<span class="string">&quot;configuration&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;bucket&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;test-notifications&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ownerIdentity&quot;</span>:&#123;</span><br><span class="line">                        <span class="attr">&quot;principalId&quot;</span>:<span class="string">&quot;7b10eee340c84201bc99ca5d8fa4f61d&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">&quot;arn&quot;</span>:<span class="string">&quot;arn:aws:s3:::test-notifications&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;id&quot;</span>:<span class="string">&quot;cffa8590-7621-4f07-99b4-5f5f5a30baab.4478.23&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;object&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;key&quot;</span>:<span class="string">&quot;charging-simple-logic.png&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;size&quot;</span>:<span class="number">9613</span>,</span><br><span class="line">                    <span class="attr">&quot;etag&quot;</span>:<span class="string">&quot;e517ba5e9e85f66a5bba81109ab4652e&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;versionId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;sequencer&quot;</span>:<span class="string">&quot;892B8A60D2CAEF37&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;metadata&quot;</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;key&quot;</span>:<span class="string">&quot;x-amz-content-sha256&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;val&quot;</span>:<span class="string">&quot;91af6adc28cbee8a82d186604f03a062b4ee64e26caebbd5d5da8e41182a1cdf&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;key&quot;</span>:<span class="string">&quot;x-amz-date&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;val&quot;</span>:<span class="string">&quot;20210429T034409Z&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">&quot;tags&quot;</span>:[</span><br><span class="line"></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;eventId&quot;</span>:<span class="string">&quot;1619667849.938461.e517ba5e9e85f66a5bba81109ab4652e&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;opaqueData&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>配置 pip 国内源</title>
    <url>/posts/archives/39470.html/</url>
    <content><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><ol>
<li>创建.pip目录</li>
</ol>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p <span class="variable">$HOME</span>/.pip</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>写入pip.conf配置文件</li>
</ol>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;[global]</span></span></span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple&quot; &gt;$HOME/.pip/pip.conf</span><br></pre></td></tr></table></figure>

<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><ol>
<li>在用户目录下，创建pip目录，例如C:\Users\Administrator\pip</li>
<li>写入pip.ini配置文件，内容如下：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<h1 id="推荐国内源"><a href="#推荐国内源" class="headerlink" title="推荐国内源"></a>推荐国内源</h1><table>
<thead>
<tr>
<th>源</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>清华大学</td>
<td><span class="exturl" data-url="aHR0cHM6Ly9weXBpLnR1bmEudHNpbmdodWEuZWR1LmNuL3NpbXBsZQ==">https://pypi.tuna.tsinghua.edu.cn/simple<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td>阿里云</td>
<td><span class="exturl" data-url="aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS9weXBpL3NpbXBsZQ==">http://mirrors.aliyun.com/pypi/simple<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td>豆瓣</td>
<td><span class="exturl" data-url="aHR0cDovL3B5cGkuZG91YmFuLmNvbS9zaW1wbGU=">http://pypi.douban.com/simple<i class="fa fa-external-link-alt"></i></span></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>pip</tag>
      </tags>
  </entry>
</search>
